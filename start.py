# -*- coding: utf-8 -*-
import time
import os
import pandas as pd
import sqlite3
import password
#–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –±–∏—Ç–∫–æ–∏–Ω –∏ –¥—Ä—É–≥–∏—Ö –∫–æ—à–µ–ª—å–∫–æ–≤
from block_io import BlockIo
api_key_block_btc = password.api_key_block_btc
api_key_block_ltc = password.api_key_block_ltc
api_key_block_doge = password.api_key_block_doge
SECRET_PIN = password.SECRET_PIN #kry2011gm
API_VERSION = 2
block_io_btc = BlockIo(api_key_block_btc, SECRET_PIN, API_VERSION)
block_io_ltc = BlockIo(api_key_block_ltc, SECRET_PIN, API_VERSION)
block_io_doge = BlockIo(api_key_block_doge, SECRET_PIN, API_VERSION)
#–ö–æ–¥—ã –∏ –º–æ–¥—É–ª—å –¥–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º–º–∞
# user_id = message.from_user.id
# user_first_name = message.from_user.first_name
# user_last_name = message.from_user.last_name
# user_username = message.from_user.username
TOKEN = password.TOKEN
import telebot
from telebot import types
bot = telebot.TeleBot(TOKEN)
@bot.message_handler(commands=["start"])
def start(m, res=False):
    connect = sqlite3.connect('users.db')
    cursor = connect.cursor()

    cursor.execute("""CREATE TABLE IF NOT EXISTS login_id(id INTEGER)""")

    connect.commit()

    people_id = m.chat.id
    cursor.execute(f"SELECT id FROM login_id WHERE id = {people_id}")
    data = cursor.fetchone()

    if data is None:
        user_id = [m.chat.id]
        cursor.execute("INSERT INTO login_id VALUES(?);", user_id)
        connect.commit()
    else:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item_person = types.KeyboardButton("üåê –û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ üåê")
        markup.add(item_person)
        bot.send_message(m.chat.id, "–¢–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", reply_markup=markup)
        bot.send_message(810299040, "–¢–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç " + str(m.from_user.id))

    answer = '–ü—Ä–∏–Ω–∏–º–∞—è –¥–∞–Ω–Ω–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ –≤—ã —Å–æ–≥–ª–∞—Å–Ω—ã —Å —Å–æ–±–ª—é–¥–µ–Ω–∏–µ–º –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∑–∞–∫–æ–Ω–æ–≤'
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item_Accept_user_agreement = types.KeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ ‚úÖ")
    item_Accept_user_agreement_all = types.KeyboardButton("üìö –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ–≥–ª–∞—à–µ–Ω–∏—è üìö")
    item_Refuse = types.KeyboardButton("‚ùå –û—Ç–∫–∞–∑–∞—Ç—å—Å—è ‚ùå")
    markup.add(item_Accept_user_agreement)
    markup.add(item_Accept_user_agreement_all)
    markup.add(item_Refuse)
    bot.send_message(m.chat.id,answer , reply_markup=markup)
    bot.send_message(810299040, "–°–æ–≥–ª–∞—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ " + str(m.from_user.id))

@bot.message_handler(commands=["delete"])
def delete(m, res=False):
    connect = sqlite3.connect('users.db')
    cursor = connect.cursor()
    people_id = m.chat.id
    cursor.execute(f"DELETE FROM login_id WHERE id = {people_id}")
    connect.commit()

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç —é–∑–µ—Ä–∞
@bot.message_handler(content_types=["text"])
def handle_text(message):
    if message.text.strip() == '‚úÖ –ü—Ä–∏–Ω—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ ‚úÖ':
        print(str(time.strftime("%Y-%m-%d ")) + str(message.chat.id) + " " + message.from_user.first_name + " " + str(message.text))

        # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ
        if os.path.isfile(str(message.from_user.id) + "_log.txt") == False:
            import pandas as pd
            import numpy as np
            btc_address = block_io_btc.get_address_balance(labels=str(message.from_user.id))
            data_btc = btc_address
            data_data_btc = data_btc["data"]
            balance_btc = data_data_btc["balances"]
            data_address_btc = pd.DataFrame(balance_btc)
            address_btc = data_address_btc['address']
            on_address_btc = address_btc[0]
            print(on_address_btc)
            ltc_address = block_io_ltc.get_address_balance(labels=str(message.from_user.id))
            doge_address = block_io_doge.get_address_balance(labels=str(message.from_user.id))

            data_person = pd.DataFrame([["id", "Fname", "BTC", "DOGE", "LTC"],
                                        [str(message.from_user.id), str(message.from_user.first_name),
                                         str(on_address_btc)]])
            data_person.to_csv(str(message.from_user.id) + "_log.txt")

            print(str(time.strftime("%Y-%m-%d ")) + "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ: " + str(message.from_user.id))
            print("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π id : " + str(message.from_user.id))
            print(btc_address)
            print(ltc_address)
            print(doge_address)
            print(str(time.strftime("%Y-%m-%d ")) + "–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –±–∞–∑–µ: " + str(
                message.from_user.id))

            bot.send_message(810299040, str(time.strftime("%Y-%m-%d ")) + "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ: " + str(message.from_user.id))
        elif os.path.isfile(str(message.from_user.id) + "_log.txt") == True:
            import pandas as pd
            import numpy as np
            btc_address = block_io_btc.get_address_balance(labels=str(message.from_user.id))
            data_btc = btc_address
            data_data_btc = data_btc["data"]
            balance_btc = data_data_btc["balances"]
            data_address_btc = pd.DataFrame(balance_btc)
            address_btc = data_address_btc['address']
            on_address_btc = address_btc[0]
            print(on_address_btc)
            ltc_address = block_io_ltc.get_address_balance(labels=str(message.from_user.id))
            data_ltc = ltc_address
            data_data_ltc = data_ltc["data"]
            balance_ltc = data_data_ltc["balances"]
            data_address_ltc = pd.DataFrame(balance_ltc)
            address_ltc = data_address_ltc['address']
            on_address_ltc = address_ltc[0]
            print(on_address_ltc)
            doge_address = block_io_doge.get_address_balance(labels=str(message.from_user.id))

            data_person = pd.DataFrame([["id", "Fname", "BTC", "DOGE", "LTC"],
                                        [str(message.from_user.id), str(message.from_user.first_name),
                                         str(on_address_btc), str(on_address_ltc)]])
            data_person.to_csv(str(message.from_user.id) + "_log.txt")

            print(str(time.strftime("%Y-%m-%d ")) + "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ: " + str(message.from_user.id))
            print("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π id : " + str(message.from_user.id))
            print(btc_address)
            print(ltc_address)
            print(doge_address)


        answer = "–°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–≤–µ—Ä–∏–µ " + str(message.from_user.first_name) + "\n" \
                 + " : " + str(message.from_user.id) + "\n" \
                 + " : " + "\n" + str(on_address_btc)

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)

        item_volue_btc = types.KeyboardButton("üìí BTC –∫–æ—à–µ–ª–µ–∫")
        item_volue_doge = types.KeyboardButton("üìô DOGE –∫–æ—à–µ–ª–µ–∫")
        item_volue_ltc = types.KeyboardButton("üìóLTC –∫–æ—à–µ–ª–µ–∫")

        item_volue = types.KeyboardButton("üíº –û–±–º–µ–Ω –Ω–∞ —Ä—É–±–ª–∏")
        item_volue_remote = types.KeyboardButton("üöß –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞, –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏ –Ω–æ–≤–æ—Å—Ç–∏")
        item_person = types.KeyboardButton("üåê –û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ üåê")
        markup.add(item_volue)
        markup.add(item_volue_btc, item_volue_ltc, item_volue_doge)
        markup.add(item_volue_remote, item_person)

        bot.send_message(message.chat.id, answer, reply_markup=markup)
        bot.send_message(810299040, answer)
    elif message.text.strip() == 'üåê –û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ üåê':
        import pandas as pd
        btc_address = block_io_btc.get_address_balance(labels=str(message.from_user.id))
        data_btc = btc_address
        data_data_btc = data_btc["data"]
        balance_btc = data_data_btc["balances"]
        data_address_btc = pd.DataFrame(balance_btc)
        address_btc = data_address_btc['address']
        on_address_btc = address_btc[0]
        print(on_address_btc)
        ltc_address = block_io_ltc.get_address_balance(labels=str(message.from_user.id))
        data_ltc = ltc_address
        data_data_ltc = data_ltc["data"]
        balance_ltc = data_data_ltc["balances"]
        data_address_ltc = pd.DataFrame(balance_ltc)
        address_ltc = data_address_ltc['address']
        on_address_ltc = address_ltc[0]
        print(on_address_ltc)
        answer = "–°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–≤–µ—Ä–∏–µ " + str(message.from_user.first_name) + "\n" \
                 + " : " + str(message.from_user.id) + "\n" \
                 + " : " + "\n" + str(on_address_btc)

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)

        item_volue_btc = types.KeyboardButton("üìí BTC –∫–æ—à–µ–ª–µ–∫")
        item_volue_doge = types.KeyboardButton("üìô DOGE –∫–æ—à–µ–ª–µ–∫")
        item_volue_ltc = types.KeyboardButton("üìóLTC –∫–æ—à–µ–ª–µ–∫")

        item_volue = types.KeyboardButton("üíº –û–±–º–µ–Ω –Ω–∞ —Ä—É–±–ª–∏")
        item_volue_remote = types.KeyboardButton("üöß –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞, –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏ –Ω–æ–≤–æ—Å—Ç–∏")
        item_person = types.KeyboardButton("üåê –û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ üåê")
        markup.add(item_volue)
        markup.add( item_volue_btc, item_volue_ltc, item_volue_doge)
        markup.add(item_volue_remote, item_person)

        bot.send_message(message.chat.id, answer, reply_markup=markup)
        bot.send_message(810299040, answer)

    elif message.text.strip() == '—Å–æ–∑–¥–∞–Ω–∏–µ –†–æ—Å—Å–∏–π—Å–∫–æ-–∫–∏—Ç–∞–π—Å–∫–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∞ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞':
        bot.send_message(message.chat.id, "Âª∫Á´ã‰øÑ‰∏≠ÁªèÊµéÂêà‰Ωú‰∏≠ÂøÉ ÊàëÂÅáËÆæÊúâ‰∏Ä‰∏™Â•ΩÁöÑÊï∞ÊçÆÂàÜÊûêÂ∏à" + str("\nhttps://vk.com/python_dikrylosov") + "\n" + "https://t.me/python8pro2023bot")
        bot.send_message(810299040, message.text.strip())
        bot.send_message(message.chat.id, "–≠—Ç–æ—Ç –æ—Ç–≤–µ—Ç –∑–∞–ª–æ–∂–µ–Ω –∑–∞—Ä–∞–Ω–µ–µ")
    elif message.text.strip() == '—Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ –ø–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –≤—ã—Ä–∞—â–∏–≤–∞–Ω–∏—è –ª–µ—á–µ–±–Ω—ã—Ö —Ç—Ä–∞–≤ –¥–ª—è –ø–æ—Å—Ç–∞–≤–æ–∫ –≤ –ö–ù–†':
        bot.send_message(message.chat.id, "—Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ –ø–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –≤—ã—Ä–∞—â–∏–≤–∞–Ω–∏—è –ª–µ—á–µ–±–Ω—ã—Ö —Ç—Ä–∞–≤ –¥–ª—è –ø–æ—Å—Ç–∞–≤–æ–∫ –≤ –ö–ù–†")
        bot.send_message(810299040, message.text.strip())
        bot.send_message(message.chat.id, "—Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ –ø–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –≤—ã—Ä–∞—â–∏–≤–∞–Ω–∏—è –ª–µ—á–µ–±–Ω—ã—Ö —Ç—Ä–∞–≤ –¥–ª—è –ø–æ—Å—Ç–∞–≤–æ–∫ –≤ –ö–ù–†")

    else:
        print(type(message.text.strip()))
        for i in range(10000):
            print([i,message.text.strip()])
        import numpy as np
        from PIL import ImageGrab
        screen = np.array(ImageGrab.grab(bbox=(0, 0, 1280, 1024)))
        #print(screen)
        bot.send_message(message.chat.id, str(type(message.text.strip())))
        bot.send_message(810299040, message.text.strip())
        bot.send_message(message.chat.id, "–ù–µ –ø–æ—Ö–æ–∂–∞ –Ω–∞ –≤—Å–µ " + message.text.strip())
print("–ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞")
bot.polling(none_stop=True, interval=0)
